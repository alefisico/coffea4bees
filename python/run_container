#!/usr/bin/env bash

# Script to run either a coffea, combine, or snakemake container

# Function to display help message
show_help() {
  echo "Usage: $0 [command] [options]"
  echo ""
  echo "Commands:"
  echo "  [command...]          Run commands inside the coffea container."
  echo "                        Opens an interactive shell if no commands are given."
  echo "                        (Interactive shell is the only option to run on LPC HTCondor)."
  echo "  combine [command...]  Run commands inside the combine container."
  echo "                        Opens an interactive shell if no commands are given."
  echo "  snakemake [options]   Run snakemake with the specified options."
  echo "                        Requires --snakefile argument."
  echo "  --help                Show this help message."
  echo ""
  echo "Examples:"
  echo "  $0                     Open an interactive shell in the analysis container. (This is the only option to run on LPC HTCondor)."
  echo "  $0 python --version    Run 'python --version' in the analysis container."
  echo "  $0 combine             Open an interactive shell in the combine container."
  echo "  $0 combine combine -M AsymptoticLimits  Run combine in the combine container."
  echo "  $0 snakemake --snakefile Snakefile  Run snakemake with the specified Snakefile."
}

# Define default paths
COFFEA_IMAGE="docker://gitlab-registry.cern.ch/cms-cmu/coffea4bees:latest"
COMBINE_IMAGE="docker://gitlab-registry.cern.ch/cms-analysis/general/combine-container:CMSSW_11_3_4-combine_v9.1.0-harvester_v2.1.0"
SNAKEMAKE_IMAGE="docker://gitlab-registry.cern.ch/cms-cmu/coffea4bees:reana_latest"

if [ -d '/cvmfs/unpacked.cern.ch' ]; then
    COFFEA_IMAGE="/cvmfs/unpacked.cern.ch/${COFFEA_IMAGE#docker://}"
    COMBINE_IMAGE="/cvmfs/unpacked.cern.ch/${COMBINE_IMAGE#docker://}"
    SNAKEMAKE_IMAGE="/cvmfs/unpacked.cern.ch/${SNAKEMAKE_IMAGE#docker://}"
fi

# Set APPTAINER_BINDPATH dynamically
if [[ $(hostname) == *"cmslpc"* ]]; then
    export APPTAINER_BINDPATH=/uscmst1b_scratch,/cvmfs,/cvmfs/grid.cern.ch/etc/grid-security:/etc/grid-security,/uscms_data/
elif [[ $(hostname) == *"rogue"* ]]; then
    export APPTAINER_BINDPATH=/cvmfs,/cvmfs/grid.cern.ch/etc/grid-security:/etc/grid-security,/home/export/,/mnt/scratch/
else
    export APPTAINER_BINDPATH=/cvmfs,/cvmfs/grid.cern.ch/etc/grid-security:/etc/grid-security
fi

# Check if apptainer is installed
command -v apptainer >/dev/null 2>&1 || { echo >&2 "Error: apptainer is not installed.  Aborting."; exit 1; }

# Function to run the coffea container
run_coffea() {

    if [ -z "$*" ]; then
        if [[ $(hostname) == *"cmslpc"* ]]; then
            if [[ ! -f ".shell" ]]; then
                curl -OL https://raw.githubusercontent.com/CoffeaTeam/lpcjobqueue/main/bootstrap.sh
                bash bootstrap.sh
                rm bootstrap.sh
                sed -i -e 's|APPTAINER_SHELL.*|APPTAINER_SHELL=$(which bash) apptainer exec -B "$(dirname "$PWD")":/srv --pwd /srv/python/ \\|' -e 's|/srv/.bashrc|/srv/python/.bashrc|' shell
                mv shell .shell
            fi
            # For htcondor jobs
            ./.shell ../${COFFEA_IMAGE#/cvmfs/unpacked.cern.ch/}
        else
            # Arguments provided, run them inside the container
            APPTAINER_SHELL=$(which bash) apptainer exec -B "$(dirname "$PWD")":/srv --pwd /srv/python/ \
            "$COFFEA_IMAGE" \
            /bin/bash 
        fi
    else
        # Arguments provided, run them inside the container
        APPTAINER_SHELL=$(which bash) apptainer exec -B "$(dirname "$PWD")":/srv --pwd /srv/python/ \
        "$COFFEA_IMAGE" \
        /bin/bash -c "$*"
    fi
}

# Function to run the combine container
run_combine() {
  
    export APPTAINER_CACHEDIR="/tmp/$(whoami)/apptainer_cache"
    export APPTAINER_TMPDIR="/tmp/.apptainer/"
    export MPLCONFIGDIR="/tmp/$(whoami)/.config/matplotlib"

    COMBINE_SETUP="source /cvmfs/cms.cern.ch/cmsset_default.sh && cd /home/cmsusr/CMSSW_11_3_4/ && cmsenv && cd /home/cmsusr/coffea4bees/"

    if [ -z "$*" ]; then
        # No further arguments, just open the container
        APPTAINER_SHELL=$(which bash) apptainer exec -B ${PWD}:/home/cmsusr/coffea4bees --pwd /home/cmsusr/coffea4bees/ \
        ${COMBINE_IMAGE} \
        /bin/bash -i -c "$COMBINE_SETUP && bash"
    else
        # Arguments provided, run them inside the container
        APPTAINER_SHELL=$(which bash) apptainer exec -B ${PWD}:/home/cmsusr/coffea4bees --pwd /home/cmsusr/coffea4bees/ \
        ${COMBINE_IMAGE} \
        /bin/bash -c "$COMBINE_SETUP && $*"
    fi
}

# Function to run snakemake
run_snakemake() {
    if [ -z "$1" ]; then
        echo "Error: No argument supplied. Please provide the snakefile."
        echo "Usage: $0 snakemake --snakefile <snakefile>"
        echo "You can also provide additional snakemake arguments."
        echo "Useful snakemake arguments: --cores, --use-singularity, --use-apptainer, --printshellcmds, --rerun-incomplete, --force"
        exit 1
    fi

    apptainer exec -B ${PWD}:/srv --pwd /srv ${SNAKEMAKE_IMAGE} snakemake "$@"
}

# Main logic: check arguments and run the appropriate container
if [ "$1" == "--help" ]; then
    show_help
    exit 0
fi

if [ -z "$1" ]; then
    # If no arguments, just run coffea with the default image
    run_coffea
else
    case "$1" in
        "combine")
        run_combine "${@:2}" # Run combine, passing along any remaining arguments
        ;;
        "snakemake")
        run_snakemake "${@:2}" # Run snakemake, passing along any remaining arguments
        ;;
        *)
        # If not combine or snakemake, assume the arguments are commands for coffea
        run_coffea "$@"
        ;;
    esac
fi